{"version":3,"sources":["theme/index.js","reducers/DataReducer.js","rootreducer.js","Store.js","client/environment.js","client/index.jsx","components/Input.js","components/nav.js","components/spectrum/auxi.js","components/spectrum/interactiveObject.js","components/spectrum/graphics.js","components/spectrum/plant.js","components/spectrum/handle.js","components/spectrum/lightGraphic.js","components/spectrum/light.js","components/spectrum/mirror.js","components/spectrum/grid.js","components/spectrum/index.js","components/sensorTypes.js","components/plants.js","components/countdown.js","components/controller.js","components/score.js","components/LoaderScreen.js","components/game.js","services/Buildertheme.js","components/Home.js","App.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["Theme","this","colors","primary","secondary","tertiary","text","defaultWrapWidth","font","sizes","normal","title","subtitle","medias","em","xs","sm","md","lg","px","query","onlySmall","largerthansm","mdandup","smallerthanmd","padding","styled","pre","values","post","children","EmptyDiv","content","defaultWrap","responsive","EmptySpan","defaultFont","div","Title","props","border","span","ACTIONS","Object","freeze","SET_CLIENT","Symbol","SET_NAV_OPEN","SET_THEME","SET_THEMES","SET_NEWS","SET_EVENTS","SET_FAQS","SET_SENSOR_TYPES","SET_PLANT_CLUSTERS","SET_SOCKET","SET_GAME_SETTINGS","initialState","client","navopen","window","innerWidth","theme","themes","news","events","faqs","sensorTypes","plantClusters","socket","gameSettings","rootReducer","combineReducers","data","state","action","type","SET_SELECTED","selected","middleware","applyMiddleware","thunkMiddleware","Store","createStore","envi","dev","location","hostname","status","document","printstatus","console","log","dispatch","settings","io","transports","DATA_ACTIONS","on","Input","Nav","useSelector","center","to","src","Logo","style","width","Text","color","fontSize","fontWeight","Container","getPointOnCircle","p5","centrum","offset","division","section","angle","Math","PI","pos","createVector","cos","sin","mult","add","sqr","x","dist2","v","w","y","distToSegment","p","sqrt","l2","t","max","min","distToSegmentSquared","IO_STATE","UNSELECTED","CLICKED","HOVERING","DRAGGED","InteractiveObject","size","easer","target","value","easing","checkChanged","rv","changed","loc","dist","isOver","mouseX","mouseY","isCurrentOver","mouseMoved","Flower","mainSegments","secondarySegments","tertiarySegments","strokeColor","rotationFactor","mainSegmentScale","random","mainStartpoint","secondarySegmentscale","secondaryStartpoint","tertiarySegmentscale","tertiaryStartpoint","i","s1","BigSpine","setstrokeWeight","setRotation","enableRotation","setRotationSpeed","s2","flipVertical","push","SmallSpine","length","setRotationFactor","draw","pop","f","c","setColor","FlowerSegment","scaleFactor","rotation","scale","translation","branches","branchPoints","strokeWeight","rotationSpeed","r","randomAdjust","sw","rotate","newBranch","setTranslation","newLeaf","Leaf","translate","stroke","noFill","bezier","debug","circle","bp","Plant","alternativeColor","onClick","grid","collisionColor","colorplaceholder","currentColors","red","green","blue","flower","FlowerGraphic","ceil","coords","nearestGridPoint","lights","col","currenctColors","light","j","beam","segments","segment","line_v","p1_x","p1_y","line_w","p2_x","p2_y","point","noStroke","fill","millis","Handle","circleSize","direction","mousePos","mouseV","diff","set","sub","normalize","handlePosition","handleOffset","setMag","Light","line","beginShape","vertex","endShape","Segment","mirror","Beam","origin","mirrors","intersectPoints","startPoint","cnt","pow","height","reflectionData","reflect","reflectionStart","cast","beamStart","beamEnd","intersectionPoints","mirrorStart","getPoints","mirrorEnd","u","distance","ID","reflectionNormal","getReflection","intersectionPoint","sort","a","b","normDirection","reflectVector","controlOffset","hide","player","lightGraphic","LightGraphic","randDirection","handle","getDirection","angleBetween","iPlay","mousePressed","mouseReleased","mouseDragged","Mirror","reflectionNormals","tester","adjustV","adjust","endPoint","tx","ty","linePoints","degrees","iPlayer","Grid","spacing","xCnt","yCnt","diam","round","players","scoreUpdate","safeDistance","Map","plants","toDraw","toInteract","lightSettings","plantSettings","amount","mirrorSettings","getCenter","setup","canvasParentRef","offsetWidth","createCanvas","screen","parent","gameUpdate","forEach","arr","emit","index","newmirror","rx","ry","setNormalizedLocation","m","dir","get","l","background","td","mr","detectCollision","frameCount","score","map","ti","SensorType","name","description","useState","open","setOpen","className","SensorTypes","st","key","Sensor","useEffect","sensors","init","s","Plants","Countdown","displaytext","endText","rt","setrt","count","setCount","int","setInterval","floor","abs","Date","getTime","clearInterval","Controller","phase","phases","setPlantClusters","setSelected","setScore","highScore","setHighScore","selector","score_","highscore_","off","getVal","getSelected","RUNNING","HS1","HSA","Score","LoaderScreen","setPlayer","MakePlayer","killed","toUpperCase","textAlign","paddingLeft","paddingRight","Game","PHASES","LOAD","END","start","setStart","setPhase","setPlayers","setTarget","listeners","setListeners","useDispatch","useFullScreenHandle","setTargetFromDate","seconds","d","setSeconds","getSeconds","newphase","beginningTime","duration","newplayers","enter","Empty","margin","borderLeft","BuilderTheme","Home","newsref","useRef","getEvents","available","moment","SubTitle","format","blocks","align","Wrapped","ref","images","image","alt","filter","e","today","yesterday","setDate","getDate","DataHelper","cli","sanityclient","App","history","createBrowserHistory","store","minWidth","exact","path","component","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d17140c9.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport \"./theme.css\"\nimport Overview from './pages/overview'\nexport {Grid, Col, Row } from 'react-styled-flexboxgrid';\n/* \n    - TOAST\n    - support multiple themes\n    - set basic html (background etc)\n    - build in version control\n    - Text\n    - Title\n    - Subtitle\n    - Container\n    - CollapsibleContainer\n    - Button\n*/\n\nexport const OverviewPage = Overview;\n\nlet settings = {\n    \n};\n\nclass Theme {\n    constructor() {\n        this.colors = {\n          primary: \"black\",\n          secondary: \"white\",\n          tertiary: \"red\"\n        };\n\n        this.colors.text = {\n            primary: this.colors.secondary,\n            secondary: this.colors.primary\n        }\n\n        this.defaultWrapWidth = 3;\n\n        this.font = \"American Typewriter\"\n\n        this.sizes = {\n            normal: \"1.2em\",\n            title: \"2em\",\n            subtitle: \"1.4em\"\n        }\n\n        this.medias = {\n          em: {\n            xs: 0,  \n            sm: 48, \n            md: 64, \n            lg: 75\n          }, \n          px: {\n            xs: 0,  \n            sm: 768, \n            md: 1024, \n            lg: 5625\n          }\n        }\n\n        this.medias.query = {\n            onlySmall : `(max-width: ${this.medias.px.sm}px)`,\n            largerthansm : `(min-width: ${this.medias.px.sm+1}px)`,\n            mdandup : `(min-width: ${this.medias.px.md}px)`,\n            smallerthanmd : `(max-width: ${this.medias.px.md-1}px)`\n        }\n\n        this.padding = {\n            xs: 10,  \n            sm: 15, \n            md: 20, \n            lg: 30\n        };\n    }\n    \n    /**\n     * HELPERS\n     */\n    get defaultWrap(){\n        return `solid ${this.colors.primary} ${this.defaultWrapWidth}px`\n    }\n\n    get defaultFont(){\n        return `font-family : ${this.font}; font-size: ${this.sizes.normal};`\n    }\n\n    get styled(){\n        return styled;\n    }\n\n    responsive(pre, values, post){\n        return `\n            ${pre}: ${values.xs}${post};\n\n            @media only screen and (min-width: ${this.medias.px.sm}px) {\n                ${pre}: ${values.sm}${post};\n            }\n\n            @media only screen and (min-width: ${this.medias.px.md}px) {\n                ${pre}: ${values.md}${post};\n            }        \n\n            @media only screen and (min-width: ${this.medias.px.lg}px) {\n                ${pre}: ${values.lg}${post};\n            }        \n        `\n    }\n    \n    /**\n     * COMPONENTS\n     */\n    /**\n     * wrapping\n     */\n    get Wrapped(){\n        return ({children})=><EmptyDiv content={`border : ${this.defaultWrap}; background: white;`}>{children}</EmptyDiv>\n    }\n\n    get Container(){\n        return ({children})=><EmptyDiv content={this.responsive(\"padding\", this.padding, 'px')}>{children}</EmptyDiv>\n    }\n\n    get Empty(){\n        return ({children})=><EmptyDiv >{children}</EmptyDiv>\n    }\n\n    get Text(){\n        return ({children})=><EmptySpan content={this.defaultFont}>{children}</EmptySpan>\n    }\n\n    // get Container(){\n    //     return styled.div`\n    //         padding: ${this.padding}\n    //     `\n    // } \n\n    // test\n\n    // /**\n    //  * typography\n    //  */\n    // get Text(){\n    //     return styled.p`\n    //         ${this.defaultFont}\n    //     `\n    // }\n\n    get Title(){\n        // return ({children})=><EmptySpan content={this.defaultFont}>{children}</EmptySpan>\n        return styled.div`\n            ${this.defaultFont}\n            font-size: ${this.sizes.title}; \n            font-weight: bold;\n        `\n    }\n\n    get SubTitle(){\n        return styled(this.Title)`\n            font-size: ${this.sizes.subtitle}; \n        `\n    }\n\n    // /**\n    //  * grid\n    //  */\n    // get Grid(){\n    //     return styled(Grid_)`\n    //         margin: 0px;\n    //         padding: 0px;\n    //         width: 100%;\n    //     `\n    // }\n\n    // get Row(){return Row_};\n    // get Col(){return Col_};\n}\n\nconst Wrapped = styled.div`\n    border: ${props=>props.border}\n`\n\nconst EmptyDiv = styled.div`\n    ${props=>props.content}\n    \n`\n\nconst EmptySpan = styled.span`\n    ${props=>props.content}\n`\n\n\nexport default Theme;","export const ACTIONS = Object.freeze({\n    SET_CLIENT: Symbol(\"data/client\"),\n    SET_NAV_OPEN: Symbol('data/navopen'),\n    SET_THEME: Symbol('data/theme'),\n    SET_THEMES: Symbol('data/themes'),\n    SET_NEWS: Symbol('data/news'),\n    SET_EVENTS: Symbol('data/cal'),\n    SET_FAQS: Symbol('data/faq'),\n    SET_SENSOR_TYPES: Symbol('data/svt'),\n    SET_PLANT_CLUSTERS: Symbol('data/pc'),\n    SET_SOCKET: Symbol('socket'),\n    SET_GAME_SETTINGS: Symbol('gamesettings'),\n});\n\nconst initialState = {\n  client: null,\n  navopen: window.innerWidth > 768,\n  theme: null,\n  themes: null,\n  news: null,\n  events: null,\n  faqs: null,\n  sensorTypes: null,\n  plantClusters: null,\n  socket: null,\n  gameSettings: null,\n};\n\nexport default (state = initialState, action) => {\n  \n  switch (action.type) {\n    case ACTIONS.SET_SELECTED : {\n      return {\n        ...state,\n        selected: action.selected\n      }\n    }\n    case ACTIONS.SET_CLIENT: {\n      return {\n        ...state,\n        client: action.client\n      };\n    }\n    case ACTIONS.SET_SENSOR_TYPES: {\n      return {\n        ...state,\n        sensorTypes: action.sensorTypes\n      };\n    }\n    case ACTIONS.SET_GAME_SETTINGS: {\n      return {\n        ...state,\n        gameSettings: action.gameSettings\n      };\n    }\n    case ACTIONS.SET_SOCKET: {\n      return {\n        ...state,\n        socket: action.socket\n      };\n    }\n    case ACTIONS.SET_PLANT_CLUSTERS: {\n      return {\n        ...state,\n        plantClusters: action.plantClusters\n      };\n    }\n    case ACTIONS.SET_NEWS: {\n      return {\n        ...state,\n        news: action.news\n      };\n    }\n    case ACTIONS.SET_EVENTS: {\n      return {\n        ...state,\n        events: action.events\n      };\n    }\n    case ACTIONS.SET_NAV_OPEN: {\n      return {\n        ...state,\n        navopen: action.navopen\n      };\n    }\n    case ACTIONS.SET_THEME: {\n      return {\n        ...state,\n        theme: action.theme\n      };\n    }\n    case ACTIONS.SET_THEMES: {\n      return {\n        ...state,\n        themes: action.themes\n      };\n    }\n    default: {\n      return {\n        ...state\n      };\n    }\n  } \n};\n","import { combineReducers } from \"redux\";\nimport data from './reducers/DataReducer';\n\nconst rootReducer = combineReducers({\n  data\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\n\nimport thunkMiddleware from \"redux-thunk\";\n\nimport rootReducer from \"./rootreducer\";\n\nconst middleware = applyMiddleware(thunkMiddleware);\n\nconst Store = createStore(rootReducer, middleware);\n\nexport default Store;\n","export const envi = ()=>{\n    const dev = (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\");\n    const status = (()=>{return `Running ${dev?'local':'server'}`})()\n    const printstatus = ()=>{\n        console.log(status);\n    }\n\n    if (dev){\n        document.title = \" (local) \" + document.title;\n    }\n    \n    return {\n        dev,\n        status,\n        printstatus\n    }   \n}\n\nexport default envi","import sanityClient from '@sanity/client'\nimport envi from './environment'\nimport {settings} from './connector_settings.json'\nimport { ACTIONS as DATA_ACTIONS } from \"../reducers/DataReducer\"\n// import toast from '../services/toast'\nimport imageUrlBuilder from '@sanity/image-url'\nimport { io } from \"socket.io-client\";\n\nconst prevFetched = {};\n\nexport const client = (dispatch, socket)=>{\n    const environment = envi();\n    let _ = settings;\n    let news = [];\n    // const sc = sanityClient({\n    //     projectId: _.projectId,\n    //     dataset: _.dataset,\n    //     token: _.token, // or leave blank to be anonymous user\n    //     ignoreBrowserTokenWarning: true,\n    //     useCdn: false\n    // })\n\n    // kick it\n    if (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\"){\n        socket = io(\"http://localhost:2200/\", { transports: [\"websocket\"] });\n    } else {\n        socket= io();\n    }\n    dispatch({type: DATA_ACTIONS.SET_SOCKET, socket});\n\n    socket.on(\"/gamesettings\", (gameSettings)=>{\n        dispatch({type: DATA_ACTIONS.SET_GAME_SETTINGS, gameSettings});\n      })\n    \n    socket.on(\"/sensortypes\", (sensorTypes)=>{\n        dispatch({type: DATA_ACTIONS.SET_SENSOR_TYPES, sensorTypes});\n    })\n\n    // socket.on(\"/updateSensors\", (plantClusters)=>{\n    //     dispatch({type: DATA_ACTIONS.SET_PLANT_CLUSTERS, plantClusters})\n    // });\n\n    // const fetch = (query)=>{\n    //     return new Promise((resolve, reject)=>{\n    //         if (prevFetched[query]){\n    //             if (environment.dev){\n    //                 console.log(\"reused cached query\");\n    //             }\n    //             resolve(prevFetched[query]);\n    //         } else {\n    //             sc.fetch(query)\n    //             .then((data)=>{\n    //                 prevFetched[query] = data;\n    //                 resolve(data);\n    //             }).catch(reject);\n    //         }\n    //     })\n    // }\n\n    // const builder = imageUrlBuilder(sc)\n\n    // const squareImage = (url, width)=>{\n    //     return builder.image(url).width(width).height(width).url();\n    // }\n\n    \n    // if (environment.dev){\n    //     environment.printstatus()\n    // } \n    // // title, description, \n    // fetch(\"*[_type == 'biomoddnews']{title, description, images[]{title, description, 'image':image.asset->url}} | order(_createdAt desc)\").then((news)=>{\n    //     dispatch({ type: DATA_ACTIONS.SET_NEWS, news});\n    // })\n\n    // fetch(\"*[_type == 'biomoddevent']{description, title, moment, available}|order(moment asc)\").then((events)=>{\n    //     dispatch({type: DATA_ACTIONS.SET_EVENTS, events});\n    // })\n\n    // fetch(\"*[_type == 'faq']{title, description}\").then((faqs)=>{\n    //     dispatch({type: DATA_ACTIONS.SET_FAQS, faqs})\n    // })\n\n    // return {\n    //     fetch,\n    //     environment,\n    //     squareImage\n    // }\n\n    return {\n        socket\n    }\n}\n\n\n\nexport default client;\n\n","import React, {useState, useEffect} from 'react';\nimport { useSelector } from \"react-redux\";\n\n// const Input = ({label, value, setValue})=>{\n//     const theme = useSelector(state => state.data.theme);\n//     const [name, setName] = useState(\"\");\n    \n//     const handleSubmit = (evt) => {\n//         evt.preventDefault();\n//         alert(`Submitting Name ${name}`)\n//     }\n\n//     if (!theme){\n//         return null;\n//     } else {\n\n//     return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//             <theme.Text>\n//                 {label}&nbsp;&nbsp;\n//           </theme.Text>\n//           <input\n//             type=\"text\"\n//             value={value}\n//             onChange={e => setValue(e.target.value)}\n//           />\n//         </label>\n//       </form>\n//     );\n//     }\n// }\n\nexport function Input({label, setValue}) {\n    const [name, setName] = useState(\"\");\n    \n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        setValue(name);\n    }\n    return (\n      <form onSubmit={handleSubmit}>\n        <label>\n            <code>\n                {label}&nbsp;\n          </code>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n        </label>\n        &nbsp;\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n\nexport default Input;","import React, {useState, useEffect} from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Col, Row} from '../theme'\nimport { NavLink } from 'react-router-dom';\nimport Logo from '../assets/logo.svg'\n\n\nconst Nav = ()=>{\n    const theme = useSelector(state => state.data.theme);\n    \n\n    if (!theme ){\n        return null;\n    }\n\n    \n\n    return <Row center=\"xs\">\n\n\n        <Col xs={8} sm={2}>\n            <NavLink to=\"/\">\n            <img src={Logo} style={{width: \"100%\"}}/>\n            </NavLink>\n        </Col>\n        <Col xs={12} sm={10}>\n            <br/><br/>\n            <NavLink to=\"/\">\n            <theme.Text >\n              <span style={{color: \"white\", fontSize: \"4em\", fontWeight: \"bold\"}}>\n                  &nbsp;BIOMODD [BRG<sup>13</sup>]\n              </span>\n                \n            </theme.Text>\n            </NavLink>\n            <theme.Container>\n            <theme.Text>\n                <NavLink to=\"/gamelegacy\" style={{color: \"white\"}}>\n                &nbsp;&nbsp;&nbsp;-> TEST GAME (legacy)\n                </NavLink>\n                <NavLink to=\"/server\" style={{color: \"white\"}}>\n                &nbsp;&nbsp;&nbsp;-> TEST SERVER\n                </NavLink>\n                <NavLink to=\"/\" style={{color: \"white\"}}>\n                &nbsp;&nbsp;&nbsp;-> HOME\n                </NavLink>\n            </theme.Text>\n            </theme.Container>\n            \n\n        </Col>\n\n       \n    </Row>\n\n}\n\nexport default Nav;\n\n\n{/* <theme.Container>\n            <br/><br/>\n            <theme.Wrapped>\n              <theme.Container>\n                <theme.Title>\n                    GoTo\n                </theme.Title>\n                <theme.Text>\n                  <ul>\n                    <li onClick={getScroller(newsref)}>\n                      -> news\n                    </li>\n                    <li onClick={getScroller(gameref)}>\n                      -> game\n                    </li>\n                    <li onClick={getScroller(restref)}>\n                      -> store and retrieve data (RESTful)\n                    </li>\n                    <li onClick={getScroller(socketref)}>\n                      -> store and retrieve data (WEBSOCKET)\n                    </li>\n                  </ul>\n                </theme.Text>\n              </theme.Container>\n            </theme.Wrapped>\n          </theme.Container> */}","// ===============================\n//      A U X\n// ===============================\nexport const getPointOnCircle = (p5, centrum, offset, division, section)=>{\n    let angle = ((2 * Math.PI) / division) * section;\n    let pos = p5.createVector(Math.cos(angle), Math.sin(angle));\n    pos.mult(offset);\n    pos.add(centrum);\n    return pos;\n}\n\n\n\nfunction sqr(x) { return x * x }\nfunction dist2(v, w) { return sqr(v.x - w.x) + sqr(v.y - w.y) }\nfunction distToSegmentSquared(p, v, w) {\n    var l2 = dist2(v, w);\n    if (l2 == 0) return dist2(p, v);\n    var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n    return dist2(p, { x: v.x + t * (w.x - v.x),\n        y: v.y + t * (w.y - v.y) });\n}\nexport const distToSegment = (p, v, w) =>{ return Math.sqrt(distToSegmentSquared(p, v, w)); }\n\n\n\n\nconst eps = 0.0000001;\nconst between = (a, b, c) => a - eps <= b && b <= c + eps;\n\nexport const segment_intersection = (x1, y1, x2,y2, x3, y3, x4, y4) => {\n\n\n    var x = ((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4)) /\n        ((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));\n\n    var y = ((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4)) /\n        ((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));\n\n    if(\n        (isNaN(x) || isNaN(y)) ||\n        (x1>=x2 && !between(x2, x, x1) || !between(x1, x, x2)) ||\n        (y1>=y2 && !between(y2, y, y1) || !between(y1, y, y2)) ||\n        (x3>=x4 && !between(x4, x, x3) || !between(x3, x, x4)) ||\n        (y3>=y4 && !between(y4, y, y3) || !between(y3, y, y4))\n    ) {\n        return false;\n    }\n\n    return true; //{x: x, y: y};\n\n};\n\n\n\nexport const mouseV = (p5)=>p5.createVector(p5.mouseX, p5.mouseY);","// ========================================\n//      I N T E R A C T I V E  O B J E C T\n// ========================================\n// an interactive object, that knows when clicked or dragged\n// currently assumes it is round\n\nexport const IO_STATE = Object.freeze({\n    UNSELECTED: \"unselected\",\n    CLICKED: \"clicked\",\n    HOVERING: \"hovering\",\n    DRAGGED: \"dragged\"\n})\n\nexport class InteractiveObject {\n    \n    constructor(location, size){\n        this.location = location;\n        this.size = size;\n        this.state = IO_STATE.UNSELECTED;\n        this.changed = false;\n        this.easing = 0.05;\n    }\n\n    easer = (target, value)=>{\n        const dx = target - value;\n        value += dx * this.easing;\n        return value;\n    }\n\n    checkChanged = ()=>{\n        const rv = this.changed;\n        this.changed = false;\n        return rv;\n    }\n\n    isOver(loc){\n        return loc.dist(this.location) < this.size/2;\n    }\n\n    isCurrentOver(p5){\n        return this.isOver(p5.createVector(p5.mouseX, p5.mouseY));\n    }\n\n    mousePressed(p5){\n        if (this.isCurrentOver(p5)){\n            this.state = IO_STATE.CLICKED;\n        }\n    }\n\n    mouseReleased(p5){\n        this.state = IO_STATE.UNSELECTED;\n        this.mouseMoved(p5);\n        this.changed = true;\n    }\n\n    mouseDragged(p5){\n        if (this.state !== IO_STATE.UNSELECTED){\n            this.state = IO_STATE.DRAGGED;\n        }   \n        this.changed = true;\n    }\n\n    mouseMoved(p5){\n        if (this.state === IO_STATE.UNSELECTED && this.isCurrentOver(p5)){\n            this.state = IO_STATE.HOVERING;\n        } else if (this.state === IO_STATE.HOVERING && !this.isCurrentOver(p5)){\n            this.state = IO_STATE.UNSELECTED;\n        }\n    }\n}","\n/* * * * * * * * * * * * * * * * * * * * * * * * \n\n                  F L O W E R\n\n * * * * * * * * * * * * * * * * * * * * * * * *\n\nDraws a full flower with a specified number of segments and a stroke color:\n\nMain segments: the outer ring of segments (biggest)\nSecondary segments: the middle ring of segments (bit smaller)\nTertiary segments: inner ring of segments (smallest)\nStroke color: a P5 color\n\nCall the function setColor(c) to change the color of the flower\n\nYou can experiment with the random ranges in the constructor to change the scale and number \nof segments in the three types of segments. There is a bit of randomness built in to make \nthe flower appear a bit different even with the same number of segments.\n\nThe different segments have a gentle rotation. Each ring of segments rotates at a slightly different speed\nCall the function setRotationFactor(f) to make the flower temporarily rotate faster. The function\nwill apply the faster rotation and then gradually decrease the rotation speed again, \nwhich can be useful for an animation effect like when a light beam hits it.\n\n*/\n\nexport class Flower {\n    constructor(mainSegments, secondarySegments, tertiarySegments, strokeColor, p5) {\n        this.rotationFactor = 1;\n        this.p5 = p5;\n        this.mainSegments = [];\n        this.secondarySegments = [];\n        this.tertiarySegments = [];\n\n        let mainSegmentScale = this.p5.random(2,3);\n        let mainStartpoint = this.p5.random(0, (Math.PI*2)/mainSegments);\n        let secondarySegmentscale = this.p5.random(1, 2);\n        let secondaryStartpoint = this.p5.random(0, (Math.PI*2)/secondarySegments);\n        let tertiarySegmentscale = this.p5.random(3,5);\n        let tertiaryStartpoint = this.p5.random(0, (Math.PI*2)/tertiarySegments);\n\n        this.strokeColor = strokeColor;\n\n        // main segments\n        for(let i=0; i<mainSegments; i++) {\n            let s1 = new BigSpine(mainSegmentScale, this.strokeColor, p5);\n            s1.setstrokeWeight(1/mainSegmentScale);\n            s1.setRotation(mainStartpoint+(i*((Math.PI*2)/mainSegments)));\n            s1.enableRotation();\n            s1.setRotationSpeed(0.001);\n\n            let s2 = new BigSpine(mainSegmentScale, this.strokeColor, p5);\n            s2.setstrokeWeight(1/mainSegmentScale);\n            s2.setRotation(mainStartpoint-(i*((Math.PI*2)/mainSegments)));\n            s2.flipVertical();\n            s2.enableRotation();\n            s2.setRotationSpeed(0.001);\n\n            this.mainSegments .push(s1);\n            this.mainSegments .push(s2);\n        }\n\n        for(let i=0; i<secondarySegments; i++) {\n            let s1 = new BigSpine(secondarySegmentscale, this.strokeColor, p5);\n            s1.setstrokeWeight(1/secondarySegmentscale);\n            s1.setRotation(secondaryStartpoint+(i*((Math.PI*2)/secondarySegments)));\n            s1.enableRotation();\n            s1.setRotationSpeed(0.0015);\n\n            let s2 = new BigSpine(secondarySegmentscale, this.strokeColor, p5);\n            s2.setstrokeWeight(1/secondarySegmentscale);\n            s2.flipVertical();\n            s2.setRotation(secondaryStartpoint+(i*((Math.PI*2)/secondarySegments)));\n            s2.enableRotation();\n            s2.setRotationSpeed(0.0015);\n\n            this.secondarySegments .push(s1);\n            this.secondarySegments .push(s2);\n        }\n\n        for(let i=0; i<tertiarySegments; i++) {\n            let s1 = new SmallSpine(tertiarySegmentscale, this.strokeColor, p5);\n            s1.setstrokeWeight(1/tertiarySegmentscale);\n            s1.setRotation(tertiaryStartpoint+(i*((Math.PI*2)/tertiarySegments)));\n            s1.enableRotation();\n            s1.setRotationSpeed(0.0025);\n\n            let s2 = new SmallSpine(tertiarySegmentscale, this.strokeColor, p5);\n            s2.setstrokeWeight(1/tertiarySegmentscale);\n            s2.setRotation(tertiaryStartpoint+(i*((Math.PI*2)/tertiarySegments)));\n            s2.flipVertical();\n            s2.enableRotation();\n            s2.setRotationSpeed(0.0025);\n\n            this.tertiarySegments .push(s1);\n            this.tertiarySegments .push(s2);\n        }\n    }\n\n    draw() {\n\n        // main\n        for(let i=0; i<this.mainSegments.length; i++) {\n            this.p5.push();\n            this.mainSegments[i].setRotationFactor(this.rotationFactor);\n            this.mainSegments[i].draw();\n            this.p5.pop();\n        }\n\n        // secondary\n        for(let i=0; i<this.secondarySegments.length; i++) {\n            this.p5.push();\n            this.secondarySegments[i].setRotationFactor(this.rotationFactor);\n            this.secondarySegments[i].draw();\n            this.p5.pop();\n        }\n\n        // tertiary\n        for(let i=0; i<this.tertiarySegments.length; i++) {\n            this.p5.push();\n            this.tertiarySegments[i].setRotationFactor(this.rotationFactor);\n            this.tertiarySegments[i].draw();\n            this.p5.pop();\n        }\n\n        // rotation factor\n        if(this.rotationFactor>1) {\n            this.rotationFactor--;\n        }\n    }\n\n    setRotationFactor(f) {\n        this.rotationFactor = f;\n    }\n\n    setColor(c) {\n        this.strokeColor = c;\n\n        // loop through all segments to set color:\n        for(let i=0; i<this.mainSegments.length; i++) {\n            this.mainSegments[i].setColor(this.strokeColor);\n        }\n\n        for(let i=0; i<this.secondarySegments.length; i++) {\n            this.secondarySegments[i].setColor(this.strokeColor);\n        }\n\n        for(let i=0; i<this.tertiarySegments.length; i++) {\n            this.tertiarySegments[i].setColor(this.strokeColor);\n        }\n    }\n}\n\n\n// // Describes an individual segment of a flower\nclass FlowerSegment {\n    constructor(scaleFactor, strokeColor, p5) {\n        this.scaleFactor = scaleFactor;\n        this.rotation = 0.0;\n        this.scale = {x: 1, y: 1};\n        this.translation = { x: 0, y: 0 };\n        this.branches = [];\n        this.branchPoints = [];\n        this.strokeWeight = 1;\n        this.rotationSpeed = 0;\n        this.rotationFactor = 1;\n        this.strokeColor = strokeColor;\n        this.p5 = p5;\n    }\n\n    setRotation(r) {\n        // add some random adjust to the rotation\n        let randomAdjust = this.p5.random(-r/40, r/40);\n        this.rotation = r + randomAdjust;\n    }\n\n    setTranslation(t) {\n        this.translation = t;\n    }\n\n    setstrokeWeight(sw) {\n        this.strokeWeight = sw;\n    }\n\n    setColor(c) {\n        this.strokeColor = c;\n    }\n\n    flipHorizontal() {\n        this.scale.x = -this.scale.x;\n    }\n\n    flipVertical() {\n        this.scale.y = -this.scale.y;\n    }\n\n    enableRotation() {\n        this.rotate = true;\n    }\n\n    setRotationSpeed(r) {\n        this.rotationSpeed = r;\n    }\n\n    setRotationFactor(f) {\n        this.rotationFactor = f;\n    }\n\n}\n\n// // Describes a big spine and its branches and leaves\nclass BigSpine extends   FlowerSegment{\n    constructor(scaleFactor, strokeColor, p5) {\n        super(scaleFactor, strokeColor, p5);\n\n        // branch points\n        this.branchPoints = [{x: 6, y: 70, r: -0.3}, {x: 5.8, y: 40, r: -0.8}, {x: -20.392, y: 7.463, r: -1.65}];\n\n        for(let i=0; i<this.branchPoints.length; i++) {\n            // either pick a leaf or a smaller spine\n            let seed = Math.random()*10;\n            if(seed<=6) {\n                // branch a smaller spine\n                let newBranch = new SmallSpine(1, this.strokeColor, this.p5);\n                newBranch.setTranslation(this.branchPoints[i]);\n                newBranch.setRotation(this.branchPoints[i].r);\n                newBranch.setstrokeWeight(1/this.scaleFactor);\n                this.branches.push(newBranch);\n\n            } else {\n                // branch a leaf\n                let newLeaf = new Leaf(1.5, this.strokeColor, this.p5);\n                newLeaf.setstrokeWeight(1/this.scaleFactor);\n                newLeaf.setTranslation(this.branchPoints[i]);\n                newLeaf.setRotation(this.branchPoints[i].r);\n                this.branches.push(newLeaf);\n            }\n        }\n    }\n\n    setColor(c) {\n        this.strokeColor = c;\n\n        for(let i=0; i<this.branches.length; i++) {\n            this.branches[i].setColor(c);\n        }\n    }\n\n    draw() {\n        this.p5.push();\n        // adjust rotation\n        this.p5.rotate(this.rotation);\n        // adjust size\n        this.p5.scale(this.scaleFactor);\n        // this sets the orientation\n        this.p5.scale(this.scale.x, this.scale.y);\n        // move to center\n        this.p5.translate(this.translation.x, this.translation.y);\n        // set the stroke\n        this.p5.strokeWeight(this.strokeWeight);\n        this.p5.stroke(this.strokeColor);\n        this.p5.noFill();\n\n        // SVG coordinates\n        this.p5.translate(0,-83.565);\n        // start drawing the Bigspine segment\n        this.p5.bezier(0, 83.565, 15.384, 56.919, 6.254, 22.847, -20.392, 7.463);\n        this.p5.bezier(-20.392, 7.463, -28.86, 2.574, -38.467, 0, -48.247, 0);\n        this.p5.bezier(0, 84.856, 10.564, 68.225, 11.09, 48.082, 3.162, 31.532);\n        this.p5.bezier(3.162, 31.532, -1.138, 22.558, -7.923, 14.64, -16.942, 8.911);\n        this.p5.bezier(-16.942, 8.911, -26.28, 2.979, -37.189, 0, -48.247, 0);\n        \n        // add some visualization for debugging purposes: \n        if(this.debug) {\n            // marker for start point\n            this.p5.circle(0, 83.565, 3);\n            \n            // branch points\n            for(let i=0; i<this.branchPoints.length; i++) {\n                let bp = this.branchPoints[i];\n                this.p5.circle(bp.x, bp.y, 3);\n            }\n            // marker for end point\n            this.p5.circle(-48.247, 0, 3);\n        }\n        \n        for(let i=0; i<this.branches.length; i++) {\n            this.branches[i].draw();\n        }\n\n        if(this.rotate) {\n            this.rotation += this.rotationSpeed * this.rotationFactor;\n        }\n        this.p5.pop();\n    }\n}\n\n\n// // draw a smaller, slightly less curvy segment, with leaves\nclass SmallSpine extends  FlowerSegment {\n    constructor(scaleFactor, strokeColor, p5) {\n        super(scaleFactor, strokeColor, p5);\n\n        // branch points\n        this.branches = [];\n        this.branchPoints = [{x: 10, y: -9.2, r: -0.4}];\n\n        for(let i=0; i<this.branchPoints.length; i++) {\n            // 50% chance to spawn a leaf\n            let seed = Math.random()*10;\n            if(seed<=5) {\n                // branch a smaller spine\n                let newLeaf = new Leaf(1, this.strokeColor, this.p5);\n                newLeaf.setstrokeWeight(1/this.scaleFactor*this.strokeWeight);\n                newLeaf.setTranslation(this.branchPoints[i]);\n                newLeaf.setRotation(this.branchPoints[i].r);\n                this.branches.push(newLeaf);\n\n            }\n        }\n    }\n\n    setColor(c) {\n        this.strokeColor = c;\n\n        for(let i=0; i<this.branches.length; i++) {\n            this.branches[i].setColor(c);\n        }\n    }\n\n    draw() {\n        this.p5.push();\n        this.p5.translate(this.translation.x, this.translation.y);\n        this.p5.rotate(this.rotation);\n        this.p5.scale(this.scale.x, this.scale.y);\n        this.p5.scale(this.scaleFactor);\n        this.p5.stroke(this.strokeColor);\n        this.p5.strokeWeight(this.strokeWeight);\n        this.p5.noFill();\n        \n        this.p5.scale(1, 1);\n\n        this.p5.translate(0.921, 3.212);\n        this.p5.bezier(-0.921, -3.212, 4.297, -7.26, 11.593, -7.26, 16.81, -3.212);\n        this.p5.translate(-0.65, 5);\n        this.p5.rotate(-Math.PI/18)\n        this.p5.bezier(-1.692, -5.037, 4.072, -10.174, 12.773, -10.174, 18.537, -5.037);\n\n        if(this.debug) {\n            // marker for start point\n            this.p5.circle(1.15, -8.15, 3);\n\n            // branchpoints\n            for(let i=0; i<this.branchPoints.length; i++) {\n                let bp = this.branchPoints[i];\n                this.p5.circle(bp.x, bp.y, 3);\n            }\n        }\n\n        \n        for(let i=0; i<this.branches.length; i++) {\n            this.branches[i].draw();\n        }\n\n        if(this.rotate) {\n            this.rotation += this.rotationSpeed * this.rotationFactor;\n        }\n        \n        this.p5.pop();\n    }\n}\n\n\n// // draws a leaf\nclass Leaf extends  FlowerSegment {\n    constructor(scaleFactor, strokeColor, p5) {\n        super(scaleFactor, strokeColor, p5);\n    }\n\n    draw() {\n        this.p5.push();\n        this.p5.translate(this.translation.x, this.translation.y);\n        this.p5.rotate(this.rotation);\n        this.p5.scale(this.scale.x, this.scale.y);\n        this.p5.scale(this.scaleFactor);\n        this.p5.translate(1.01, 2.246);\n        this.p5.stroke(this.strokeColor);\n        //this.p5.strokeWeight(this.strokeWeight);\n        this.p5.noFill();\n\n        // leaf middle line\n        this.p5.bezier(-1.01, -2.246, 0.912, -3.034, 3.068, -3.034, 4.99, -2.246);\n        \n        // add some visualization for debugging purposes: \n        if(this.debug) {\n            // marker for start point\n            this.p5.circle(-1.01, -2.246, 3);\n        }\n        \n        // adjust leaf position and orientation\n        this.p5.scale(1, -1);\n        this.p5.rotate(-Math.PI/3.6);\n        this.p5.translate(-1.25, 5.35);\n        \n        // first leaf half\n        this.p5.bezier(0, -2.368, 0.72, -2.309, 1.394, -1.988, 1.893, -1.466);\n        this.p5.bezier(1.893, -1.466, 2.127, -1.22, 2.3, -0.921, 2.395, -0.596);\n        this.p5.bezier(2.395, -0.596, 2.494, -0.363, 2.649, -0.159, 2.845, 0);\n        \n        // second half\n        this.p5.bezier(0, -2.368, 0.008, -1.544, 0.467, -0.791, 1.194, -0.403);\n        this.p5.bezier(1.194, -0.403, 1.446, -0.27, 1.726, -0.198, 2.01, -0.195);\n        this.p5.bezier(2.01, -0.195, 2.299, -0.191, 2.584, -0.125, 2.845, 0);\n        this.p5.pop();\n    }\n}\n\n\n\n\n\n","import {IO_STATE, InteractiveObject} from './interactiveObject.js'\n\nimport {distToSegment} from './auxi'\nimport {Flower as FlowerGraphic} from './graphics';\n\n// ===============================\n//      P L A N T\n// ===============================\n// Them plants\n\nclass Plant extends InteractiveObject {\n    constructor({location, size, color, alternativeColor, onClick, p5, grid, collisionColor}){\n        super(location, size);\n        this.color = color;\n        this.alternativeColor = alternativeColor;\n        this.collisionColor = collisionColor;\n        this.colorplaceholder = color;\n        this.onClick = onClick;\n        this.currentColors = {\n            red: false,\n            green: false,\n            blue: false\n        };\n\n        this.flower = new FlowerGraphic(Math.ceil(p5.random(4,6)), Math.ceil(p5.random(2,4)), Math.ceil(p5.random(5, 8)), p5.color(p5.random(75, 128), p5.random(75, 128), p5.random(75, 128)), p5);\n        this.coords = grid.nearestGridPoint({ x: p5.random(0, 1), y: p5.random(0, 1)});\n    }\n\n    detectCollision(lights){\n        let col = false;\n        this.currenctColors = {\n            red: false,\n            green: false,\n            blue: false\n        };\n        for (let light of lights.values()) {\n            for (let j = 0; j < light.beam.segments.length; j++) {\n                var segment = light.beam.segments[j];\n\n                let line_v = {x: segment.p1_x, y: segment.p1_y};\n\n                let line_w = {x: segment.p2_x, y: segment.p2_y};\n\n                let point =  {x: this.location.x, y: this.location.y};\n                if (distToSegment(point, line_v, line_w) < this.size/2){   // collision\n                    col = true;\n                    this.currentColors[light.color] = true;\n                }\n            }\n        }\n        if (col) {\n            this.color = this.collisionColor;\n        } else {\n            this.color = this.colorplaceholder\n        }\n    }\n    draw(p5){\n        p5.push();\n        p5.translate(this.location.x, this.location.y);\n        this.flower.draw();\n\n        p5.pop();\n\n        p5.noStroke();\n        if (this.state === IO_STATE.UNSELECTED || this.state === IO_STATE.HOVERING){\n            p5.fill(this.color);\n        } else {\n            if (this.state === IO_STATE.CLICKED ){\n                this.onClick();\n            }\n            p5.fill(this.alternativeColor);\n        }\n\n        let size = this.size;\n        if (this.state === IO_STATE.HOVERING){\n            size+=Math.sin(p5.millis())*5;\n        }\n        \n        p5.circle(this.location.x, this.location.y, size);\n    }\n}\n\nexport default Plant;","import {IO_STATE, InteractiveObject} from './interactiveObject'\nimport {mouseV} from './auxi'\n\n// the handle that allows for the rotation of the light\nclass Handle extends InteractiveObject {\n    constructor (location, size, circleSize, direction, color, strokeWeight){\n        super(location, size);\n        this.color = color;\n        this.strokeWeight = strokeWeight;\n\n        this.direction = direction;\n        this.circleSize = circleSize;\n        this.target = this.direction;\n    }\n\n    rotate(p5) {\n        // this should just update the direction, the rest will be handled by draw\n        let mousePos = mouseV(p5);\n        const diff = p5.createVector(0,0).set(this.location).sub(mousePos);\n        this.direction = p5.createVector(-diff.normalize().x, -diff.normalize().y);\n        this.target = this.direction;\n    }\n\n    // return the direction\n    // the object calling this might do something with the direction (eg: beam inverses the direction)\n    getDirection(p5) {\n        return this.direction;\n    }\n\n    // overwrite the function to detect hover based on the position of the handle\n    isOver(loc){\n        return  loc && this.handlePosition && loc.dist(this.handlePosition) < this.size/2;\n    }\n\n\n    draw(p5){\n        if(this.state === IO_STATE.DRAGGED){\n            this.rotate(p5);\n        }\n\n        if (this.target!==this.direction){\n            this.direction.x = this.easer(this.target.x, this.direction.x);\n            this.direction.y = this.easer(this.target.y, this.direction.y);\n        }\n\n        p5.strokeWeight(this.strokeWeight);\n        // draw the cirlce on which the handle moves\n        p5.noFill();\n        p5.stroke(this.color);\n        p5.circle(this.location.x, this.location.y, this.circleSize);\n        \n        let handleOffset = p5.createVector(this.direction.x, this.direction.y);\n        handleOffset.setMag(this.circleSize/2);\n\n        // calculate the handle position\n        this.handlePosition = p5.createVector(this.location.x, this.location.y).add(handleOffset);\n\n        // offset the handle in the direction needed:\n        // draw the handle\n        p5.noStroke();\n        p5.fill(this.color);\n        p5.circle(this.handlePosition.x, this.handlePosition.y, this.state===IO_STATE.UNSELECTED?this.size:this.size*1.2);\n    }\n\n}\n\nexport default Handle;\n","// /* * * * * * * * * * * * * * * * * * * * * * * * \n\n//                   L I G H T\n\n//  * * * * * * * * * * * * * * * * * * * * * * * *\n\n//     Draws the graphics for the light in a color c\n// */\n\nexport class Light {\n    constructor(scaleFactor, color, p5) {\n        this.scaleFactor = scaleFactor;\n        this.strokeColor = color;\n        this.strokeWeight = 1/scaleFactor;\n        this.debug = false;\n        this.p5 = p5;\n    }\n\n    draw() {\n        this.p5.push();\n        //this.p5.translate(width/2, height/2);\n        this.p5.stroke(this.strokeColor);\n        this.p5.strokeWeight(this.strokeWeight);\n        this.p5.scale(this.scaleFactor);\n        \n        // triangle\n        this.p5.push();\n        this.p5.translate(0, 10.5);\n        this.p5.line(0, -31.341, -18.1, -0.008);\n        this.p5.line(-18.1, -0.008, 18.085, 0);\n        this.p5.line(18.085,0, 0,-31.341);\n        this.p5.pop();\n\n        // triangle\n        this.p5.push();\n        this.p5.translate(18.2, 21);\n        this.p5.line(0, -31.326, -18.099, 0.007);\n        this.p5.line(-18.099, 0.007, -36.185, -31.333);\n        this.p5.line(-36.185, -31.333, 0,-31.326);\n        this.p5.pop();\n\n        // line\n        this.p5.push();\n        this.p5.rotate(Math.PI/3);\n        this.p5.translate(-6, 10.5);\n        this.p5.line(-6.033, -10.447, 18.09, -10.447);\n        this.p5.pop();\n\n        // line\n        this.p5.push();\n        this.p5.rotate(-Math.PI/3);\n        this.p5.translate(-6, -10.5);\n        this.p5.line(-6.029, 10.444, 18.095, 10.445);\n        this.p5.pop();\n\n        // top filled bit\n        this.p5.beginShape();\n        this.p5.fill(this.strokeColor);\n        this.p5.vertex(0, 0);\n        this.p5.vertex(-6, -10.5);\n        this.p5.vertex(0, -20.5);\n        this.p5.vertex(6, -10.5);\n        this.p5.vertex(0, 0);\n        this.p5.endShape();\n\n        // bottom filled bit\n        let c = this.p5.color(0);\n        this.p5.fill(c);\n        this.p5.beginShape();\n        this.p5.vertex(0, 0);\n        this.p5.vertex(-6, 10.5);\n        this.p5.vertex(0, 21);\n        this.p5.vertex(6, 10.5);\n        this.p5.vertex(0, 0);\n        this.p5.endShape();\n\n        this.p5.noFill();\n\n        this.p5.push();\n        // hexagon\n        this.p5.translate(-48.206/2, 0);\n        this.p5.line(0, -0.01, 12.066, -20.899);\n        this.p5.line(12.066, -20.899, 36.189, -20.894);\n        this.p5.line(36.189, -20.894, 48.206, 0.07);\n        this.p5.line(48.206, 0.07, 36.18, 20.889);\n        this.p5.line(36.18, 20.889, 12.057, 20.884);\n        this.p5.line(12.057, 20.884, 0, -0.01);\n\n        this.p5.pop();\n        if(this.debug) {\n            this.p5.circle(0, 0, 3);\n        }\n        this.p5.pop();\n\n    }\n}","import {IO_STATE, InteractiveObject} from './interactiveObject'\nimport {mouseV} from './auxi'\nimport p5 from \"react-p5\"\nimport Handle from \"./handle.js\"\nimport { Light as LightGraphic } from './lightGraphic';\n\n// ===============================\n//      L I G H T\n// ===============================\n\n/* \n    Contains the objects: \n    - Segment:\n        Describes a segment on a beam of light, each segment is the result of a reflection off of a mirror\n    - Beam\n        Functionality of a full beam, this includes the ability to cast a beam in a direction and detect reflections\n    - Light:\n        Functionality of the full light, containing a beam, handle, and IO\n\n*/\n// The object that emits a beam of light\n\n\n\nclass Segment {\n    constructor(p1_x, p1_y, p2_x, p2_y, color, mirror){\n        this.p1_x = p1_x;\n        this.p1_y = p1_y;\n        this.p2_x = p2_x;\n        this.p2_y = p2_y;\n        this.color = color;\n        this.mirror = mirror;\n    }\n}\n\n\nclass Beam {\n\n    constructor(origin, direction, color, mirrors, p5){\n        this.origin = origin;\n        this.direction = direction;\n        this.color = color;\n        this.segments = [];\n        this.mirrors = mirrors;\n\n        // array to keep track of calculated intersection points\n        // this is mostly for debugging\n        this.intersectPoints = [];\n    }\n\n    setDirection(direction, p5){\n        this.direction = direction;\n        //this.createSegmentZero(p5);\n        //this.segments[0].direction = direction;\n    }\n\n\n    /* New function to cast a beam: \n    takes point of origin and direction\n    this function creates a beam and then checks if it reflects off a mirror (another new function);\n    on reflection it will create a segment, add it to the array and cast a new beam from the reflection point\n    */\n    cast(direction, startPoint, p5, cnt, mirror){\n        // draw from point of origin in direction\n        const beam = p5.createVector(startPoint).set(direction);\n        // set the beam length to the diagonal of the sketch so it always reaches the end of the screen\n        beam.setMag(Math.sqrt(Math.pow(p5.width, 2)+Math.pow(p5.height, 2)));\n        beam.add(startPoint);\n        \n        // check beam for reflection (function)\n        let reflectionData = this.reflect(startPoint, beam, direction, p5, mirror);\n        if(reflectionData!==false) {\n            // create segment and add to segments array\n            this.segments.push(new Segment(startPoint.x, startPoint.y, reflectionData.x, reflectionData.y, this.color, mirror));\n            // cast new beam from reflectionpoint\n            let reflectionStart = p5.createVector(reflectionData.x, reflectionData.y);\n            // keep counter to stop excessive recursion\n            cnt++;\n            if(cnt<1000){\n                this.cast(reflectionData.direction, reflectionStart, p5, cnt, reflectionData.mirror);\n            }\n        } else {\n            // no reflection has been detected\n            this.segments.push(new Segment(startPoint.x, startPoint.y, beam.x, beam.y, this.color, mirror));\n        }\n    }\n\n\n\n    reflect(beamStart, beamEnd, direction, p5, mirror){\n\n        let intersectionPoints = [];\n\n        // loop through mirrors\n        for(let i=0; i<this.mirrors.length; i++) {\n            let mirrorStart = this.mirrors[i].getPoints(p5)[0];\n            let mirrorEnd = this.mirrors[i].getPoints(p5)[1];\n\n            //if(this.mirrors[i].id == \"mirror_0\") console.log(\"x3: \"+ mirrorStart.x + \", y3: \"+ mirrorStart.y + \" | x4: \"+ mirrorEnd.x + \", y4: \"+ mirrorEnd.y);\n\n            // find the intersection \n            // see algorithm at https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line_segment\n            let t = ((mirrorEnd.x - mirrorStart.x) * (beamStart.y - mirrorStart.y) - (mirrorEnd.y - mirrorStart.y) * (beamStart.x - mirrorStart.x)) / ((mirrorEnd.y - mirrorStart.y) * (beamEnd.x - beamStart.x) - (mirrorEnd.x - mirrorStart.x) * (beamEnd.y - beamStart.y));\n            let u = ((beamEnd.x - beamStart.x) * (beamStart.y - mirrorStart.y) - (beamEnd.y - beamStart.y) * (beamStart.x - mirrorStart.x)) / ((mirrorEnd.y - mirrorStart.y) * (beamEnd.x - beamStart.x) - (mirrorEnd.x - mirrorStart.x) * (beamEnd.y - beamStart.y));\n\n            // check t & u to see if intersection is found\n            if((t>=0 && t<=1) && (u>=0 && u<=1)) {\n                // calculate intersectionpoint x & y, and the distance to the startpoint\n                let x = beamStart.x + t * (beamEnd.x - beamStart.x);\n                let y = beamStart.y + t * (beamEnd.y - beamStart.y);\n                let distance = p5.dist(beamStart.x, beamStart.y, x, y);\n                // save for later\n                if(this.mirrors[i].ID!=mirror) {\n                    let reflectionNormal = this.mirrors[i].getReflection(p5);\n                    intersectionPoints.push({x: x, y: y, distance: distance, mirror: this.mirrors[i].ID, direction: 0, reflectionNormal: reflectionNormal});\n                }\n            }\n            \n        }\n\n        // exit if no points have been found\n        if(intersectionPoints.length===0) {\n            return false;\n        } else {\n            let intersectionPoint = {};\n            // sort the found intersectionpoints by distance\n            if(intersectionPoints.length==1) {\n                // check if the one hit has a distance of 0\n                // this means it is a beam that has already reflected and does not hit anything else other than the starting mirror\n                if(intersectionPoints[0].distance==0) {\n                    console.log(\"no reflection except itself\");\n                    return false;\n                } else {\n                    intersectionPoint = intersectionPoints[0];\n                }\n            }  else {\n                // sort if there is more than one reflection point\n                intersectionPoints.sort((a,b) => (a.distance > b.distance) ? 1 : -1);\n\n                // check if the first hit has a distance of 0 (hit on the mirror from which a beam starts)\n                if(intersectionPoints[0].distance==0) {\n                    // skip the hit with distance 0\n                    intersectionPoint = intersectionPoints[1];\n                } else {\n                    intersectionPoint = intersectionPoints[0];\n                }\n                \n            }\n            \n            // calculate angle using P5 reflect function\n            let normDirection = p5.createVector(direction.x, direction.y);\n            let reflectVector = p5.createVector(intersectionPoint.reflectionNormal.x, intersectionPoint.reflectionNormal.y);\n            normDirection.reflect(reflectVector);\n            intersectionPoint.direction = normDirection;\n\n            // add to array and return\n            this.intersectPoints.push(intersectionPoint);\n            return intersectionPoint;\n        }\n        \n    }\n    \n\n    draw(p5, direction) {\n        \n        // reset segments\n        this.segments = [];\n        // debug: points of intersection\n        this.intersectPoints = [];\n        // cast first beam (this starts the population of the segments array)\n        this.cast(p5.createVector(-direction.x, -direction.y), this.origin, p5, 0, null);\n        \n        // this debug flag shows or hide the dots that indicate intersection points on the beam\n        let debug = true;\n        if(debug){\n            if(this.intersectPoints.length>0) {\n                // console.log(\"Number of intersection points: \"+ this.intersectPoints.length);\n                for(let j=0; j<this.intersectPoints.length; j++) {\n                    // console.log(this.intersectPoints[j].distance);\n                    p5.circle(this.intersectPoints[j].x, this.intersectPoints[j].y, 10);\n                }\n            }\n        }\n        \n        p5.noFill();\n\n        // loop through and draw segments\n        for (let i=0; i<this.segments.length; i++){\n            //console.log(this.segments[i].mirror);\n            p5.stroke(this.segments[i].color);\n            p5.line(this.segments[i].p1_x, this.segments[i].p1_y, this.segments[i].p2_x, this.segments[i].p2_y);\n        }\n    }\n    \n}\n\n\n\nclass Light extends InteractiveObject {\n    constructor({color, size, location, controlOffset, hide, strokeWeight, player}, mirrors, p5){\n        super(location, size);\n        this.color = color;\n        this.controlOffset = controlOffset;\n        this.strokeWeight = strokeWeight;\n        this.player = player;\n        this.hide = hide;\n        this.lightGraphic = new LightGraphic(1, this.color, p5)\n         \n        // set random direction (direction needs to come from biomodd server) and create handle\n        let randDirection = p5.createVector(p5.random(-1, 1), p5.random(-1, 1));\n        this.handle = new Handle(this.location, 10, 100, randDirection, this.color, this.strokeWeight);\n\n        // create the beam with the direction from the handle\n        this.beam = new Beam(this.location, p5.createVector(-this.handle.getDirection(p5).x, -this.handle.getDirection(p5).y), color, mirrors, p5);        \n    }\n\n    iPlay(){\n        return this.player == this.color;\n    }\n\n    draw(p5){\n\n        if (this.hide){\n            return;\n        }\n        p5.push();\n        p5.translate(this.location.x, this.location.y);\n        p5.rotate(-this.handle.direction.angleBetween(p5.createVector(1, 1))-Math.PI/4)\n        this.lightGraphic.draw();\n        p5.pop();\n\n        // draw circle for the light\n        p5.noStroke();\n        if (this.iPlay()){\n            p5.fill(this.color);\n        } \n        // p5.circle(this.location.x, this.location.y, this.size);\n        p5.noFill();\n\n        // draw handle\n        this.handle.draw(p5);\n\n        // draw beam\n        this.beam.draw(p5, this.handle.getDirection(p5));\n    }\n\n    // ---- I/O stuff \n    // passing interactions down to the handle member\n    mousePressed(p5){\n        if (this.iPlay()){\n            super.mousePressed(p5);\n            this.handle.mousePressed(p5);\n        }\n    }\n\n    mouseReleased(p5){\n        if (this.iPlay()){\n            super.mouseReleased(p5);\n            this.handle.mouseReleased(p5);\n        }\n    }\n\n    mouseDragged(p5){\n        if (this.iPlay()){\n            super.mouseDragged(p5);\n            this.handle.mouseDragged(p5);\n        }\n    }\n\n    mouseMoved(p5){\n        if (this.iPlay()){\n            super.mouseMoved(p5);\n            this.handle.mouseMoved(p5);\n        }\n    }    \n}\n\nexport default Light;","import {InteractiveObject, IO_STATE} from './interactiveObject.js'\nimport Handle from \"./handle.js\"\nimport {segment_intersection} from \"./auxi\";\n\n\nclass Mirror extends InteractiveObject {\n    constructor({location, size, color, alternativeColor, direction, ID, onClick, player}, p5){\n        super(location, size);\n        this.color = color;\n        this.alternativeColor = alternativeColor;\n        this.rotation = 0;\n        this.strokeWeight = 5;\n        this.player = player;\n        this.ID = ID;\n        // store mirror id, as it can help with debugging\n        // this.id = \"mirror_\"+id;\n\n        \n        // generate a random direction and create the handle\n        let randDirection = p5.createVector(p5.random(-1, 1), p5.random(-1, 1));\n        this.handle = new Handle(this.location, 10, 25, randDirection, this.color, 2);\n\n        // store the normalized vectors used to calculate reflection angles\n        this.reflectionNormals = [null, null];\n        this.onClick = onClick;\n\n        this.tester = new InteractiveObject(this.location, this.size/3);\n    }\n\n    // gets the start and end coordinates of the mirror\n    // returns an array of length 2, with each element being an object containing an x & y value\n    getPoints(p5){\n        // calculate the start and end point of the mirror\n        // adjust vector based on the direction set by the handle\n        let adjustV = this.handle.getDirection(p5).setMag(this.size/2);\n        let adjust = p5.createVector(adjustV.x, adjustV.y).rotate(Math.PI/2);\n\n        // startpoint of mirror\n        let startPoint = p5.createVector(this.location.x, this.location.y);\n        startPoint.add(p5.createVector(-adjust.x, -adjust.y));\n        // endpoint\n        let endPoint = p5.createVector(this.location.x, this.location.y);\n        endPoint.add(adjust);\n        \n        return [{x: startPoint.x, y: startPoint.y}, {x: endPoint.x, y: endPoint.y}];\n    }\n\n    setNormalizedLocation(x, y, p5){\n        let tx = x * p5.width;\n        let ty = y * p5.height;\n        this.tester.location = p5.createVector(tx, ty);\n    }\n\n\n    // gets the point of reflection from light.beam and calculates the normalized vector around which to reflect the beam\n    getReflection(p5){\n        // return the direction vector\n        return p5.createVector(this.handle.direction.x, this.handle.direction.y);\n    }\n\n    // is a given coordinate (loc) over this mirror?\n    isOver(loc){\n        // needs to be rewritten!\n        let x = loc.x;\n        let y = loc.y;\n        return this.location.x <= x && x <= this.location.x + this.strokeWeight &&\n            this.location.y <= y && y <= this.location.y + this.size;\n    }\n\n   draw(p5){       \n        this.location.x = this.easer(this.tester.location.x, this.location.x)\n        this.location.y = this.easer(this.tester.location.y, this.location.y)\n        this.handle.location = this.location;\n        p5.strokeWeight(this.strokeWeight);\n        p5.stroke(this.color);\n\n        let size = this.size;\n        if (this.state === IO_STATE.HOVERING){\n            size+=Math.sin(p5.millis())*2;\n        }\n\n        if (this.state === IO_STATE.CLICKED){\n            this.onClick();\n        }\n       \n        // draw the line\n        let linePoints = this.getPoints(p5);\n        p5.line(linePoints[0].x, linePoints[0].y, linePoints[1].x, linePoints[1].y);\n\n        // draw the handle\n        this.handle.draw(p5);\n\n        // debug: show reflection normals\n        let debug = false;\n        if(debug) {\n            p5.stroke(\"rgba(0, 255, 255, 1)\");\n            for(let i=0; i<this.reflectionNormals.length; i++) {\n                if(this.reflectionNormals[i]!=null) {\n                    p5.line(this.reflectionNormals[i].origin.x, this.reflectionNormals[i].origin.y, this.reflectionNormals[i].vector.x, this.reflectionNormals[i].vector.y);\n                }\n            }\n        }\n\n        if (this.tester.state == IO_STATE.DRAGGED){\n            this.tester.location = p5.createVector(p5.mouseX, p5.mouseY);\n            this.location = p5.createVector(p5.mouseX, p5.mouseY);\n            this.handle.location = p5.createVector(p5.mouseX, p5.mouseY);\n            this.changed = true;\n        }\n\n        if (this.tester.state == IO_STATE.CLICKED){\n            this.onClick();\n        }\n\n    }\n\n    rotate(degrees){\n        this.handle.direction.rotate(degrees)\n        this.changed = true;\n        this.handle.changed = true;\n    }\n\n    iPlayer(){\n        return ((this.player == this.color)||(this.player == this.color+\"s\"))\n    }\n    \n\n    // ---- I/O stuff \n    // passing interactions down to the handle member\n    mousePressed(p5){\n        // super.mousePressed(p5);\n        // console.log(this.player, this.color);\n        // super.mousePressed(p5);\n        if (this.iPlayer()){\n            this.handle.mousePressed(p5);\n            this.tester.mousePressed(p5);\n        }\n    }\n\n    mouseReleased(p5){\n        // super.mouseReleased(p5);\n        if (this.iPlayer()){\n            this.handle.mouseReleased(p5);\n            this.changed = true;\n            this.tester.mouseReleased(p5);\n        }\n    }\n\n    mouseDragged(p5){\n        if (this.iPlayer){\n            this.tester.mouseDragged(p5);\n            this.handle.mouseDragged(p5);\n        }\n    }\n\n    mouseMoved(p5){\n        if (this.iPlayer()){\n            this.tester.mouseMoved(p5);\n            this.handle.mouseMoved(p5);\n        }\n    }    \n}\n\nexport default Mirror;","export class Grid {\n    constructor(spacing, color, p5) {\n        this.spacing = spacing;\n        this.strokeColor = color;\n        this.xCnt = p5.width / this.spacing;\n        this.yCnt = p5.height / this.spacing;\n        this.diam = this.spacing*2;\n        this.debug = false;\n        this.p5 = p5;\n    }\n\n    draw() {\n        this.p5.noFill();\n        this.p5.stroke(this.strokeColor);\n        this.p5.strokeWeight(1);\n        // draw the circle background pattern\n        for(let i=0; i<=Math.ceil(this.xCnt); i++) {\n            for(let j=0; j<=Math.ceil(this.yCnt); j++) {\n                this.p5.circle(i*this.spacing, j*this.spacing, this.diam);\n\n                if(this.debug) {\n                    // put a marker on the intersections\n                    this.p5.circle(i*this.spacing, j*this.spacing, 10);\n                }\n            }\n        }\n    }\n\n    // gets a point with x & y and converts it to the nearest grid point\n    nearestGridPoint(loc) {\n        let x = Math.round(loc.x/this.spacing) * this.spacing;\n        let y = Math.round(loc.y/this.spacing) * this.spacing;\n        return {x: x, y: y };\n    }\n}","import React from \"react\";\nimport Sketch from \"react-p5\";\nimport {getPointOnCircle} from './auxi'\nimport Plant from './plant'\nimport Light from './light'\nimport Mirror from \"./mirror\";\nimport { IO_STATE } from \"./interactiveObject\";\nimport { ACTIONS as DATA_ACTIONS } from \"../../reducers/DataReducer\"\nimport { Grid } from \"./grid\";\n\n\n// ===============================\n// ===============================\n//      G A M E\n// ===============================\n// ===============================\nexport default ({socket, player, players, safeDistance, scoreUpdate}) => {\n\n    // enumerations\n\n    // globals\n    const lights        = new Map();\n    const plants        = [];\n    const mirrors        = [];\n    let grid;\n\n    // -- keep track of all objects we want to draw \n    // --- expects they implemented a draw(p5) method\n    const toDraw        = [];\n\n    // -- keep track of all objects we want to interact with \n    // --- expects they implemented all interactive methods as defined in the InteractiveObject class\n    const toInteract    = [];\n\n    const settings = {\n        background: \"black\"\n    }\n\n    const lightSettings = {\n        size: 30, \n        controlOffset: 20,\n        offset: .4,\n        strokeWeight: 2\n    };\n\n    const plantSettings = {\n        amount: 1,\n        size: 40,\n        color: \"grey\",\n        alternativeColor: \"lightgreen\"\n    }\n\n    const mirrorSettings = {\n        size: 50,\n        alternativeColor: \"0f0\"\n    }\n    \n    // ===============================\n    //      A U X\n    // ===============================\n    const getCenter = (p5)=>{\n        return p5.createVector(p5.width*.5, p5.height*.5);\n    }\n\n    const getPlayerColor = ()=>{\n        if (player == \"green\" || player == \"greens\"){\n            return \"green\"\n        }\n        if (player == \"blue\" || player == \"blues\"){\n            return \"blue\"\n        }\n        return \"red\";\n    }\n\n    // const getRandomPoint = (p5)=> p5.createVector(Math.random()*p5.width, Math.random()*p5.height);\n    \n    // ===============================\n    //      S E T U P\n    // =============================== \n\tconst setup = (p5, canvasParentRef) => {\n        console.log(\"game started\")\n        // setup canvas\n        if (canvasParentRef && canvasParentRef.offsetWidth){\n            console.log(canvasParentRef.offsetWidth)\n            p5.createCanvas(canvasParentRef.offsetWidth, window.screen.height).parent(canvasParentRef);\n        } else {\n            throw \"canvas not found\"\n        }\n\n        grid = new Grid(100, \"grey\", p5);\n\n        // setup sockets\n        socket.on(\"/gameUpdate\", (gameUpdate)=>{\n            const colors = [\"red\", \"green\", \"blue\"];\n            if (plants.length){\n                // update location\n\n            } else {\n                //  instantiate \n                gameUpdate.plants.forEach((p, i, arr)=>{\n                    plants[i] = new Plant({location: p5.createVector(p.x*p5.width, p.y*p5.height), ID: p.ID,\n                        onClick: ()=>{\n                            socket.emit(\"/selected\", {type: \"plant\", index: i});\n                        }, grid, p5, collisionColor:getPlayerColor() , ...plantSettings});\n                    toDraw.push(plants[i]);\n                    toInteract.push(plants[i]);\n                });\n            }\n\n            if (mirrors.length){\n                // update\n                mirrors.forEach((mirror, i)=>{\n                    if (mirror && mirror.state == IO_STATE.UNSELECTED && mirror.handle.state == IO_STATE.UNSELECTED && gameUpdate.mirrors[i]){\n                        const newmirror = gameUpdate.mirrors[i];\n                        mirror.handle.target = p5.createVector(newmirror.rx, newmirror.ry);\n                        mirror.setNormalizedLocation(newmirror.x, newmirror.y, p5);\n                    }\n                })\n            } else {\n                gameUpdate.mirrors.forEach((m, i, arr)=>{\n                    mirrors[i] = new Mirror({location: p5.createVector(m.x*p5.width, m.y*p5.height), player, color: m.player, ID: m.ID || Math.random(),\n                        onClick: ()=>{\n                            socket.emit(\"/selected\", {type: \"mirror\", index: i});\n                        },\n                        ...mirrorSettings}, p5);\n                    const dir = p5.createVector(m.rx, m.ry);\n                    mirrors[i].handle.direction  = dir;\n                    mirrors[i].handle.target = dir;\n                    toDraw.push(mirrors[i]);\n                    toInteract.push(mirrors[i]);\n                });\n\n                colors.forEach((color, i)=>{\n                    \n                        lights.set(color, new Light(\n                            {\n                                color, \n                                player,\n                                hide: !players[color],\n                                location: getPointOnCircle(p5, getCenter(p5), p5.width*lightSettings.offset, 3, i),\n                                ...lightSettings\n                        }, mirrors, p5));\n                        toDraw.push(lights.get(color));\n                        toInteract.push(lights.get(color));\n                    \n                })\n            }\n\n            if (lights){\n                // update lights position\n                colors.forEach(c=>{\n                    const l = lights.get(c);\n                    if (l && l.state == IO_STATE.UNSELECTED){\n                        l.handle.target = p5.createVector(gameUpdate[c].x,gameUpdate[c].y);\n                    }\n                })\n            }\n        })\n\n        socket.on(\"/rotateMirror\", ({index, value})=>{\n            if (index && value){\n                mirrors[index].rotate(value);\n            }\n        });\n\n        socket.on(\"/moveMirror\", ({index, value})=>{\n            if (index && value){\n                mirrors[index].location.x += value.x || 0;\n                mirrors[index].location.y += value.y || 0;\n            }\n        })\n\t};\n\n\n    // ===============================\n    //      D R A W\n    // =============================== \n\tconst draw = (p5) => {\n\t\tp5.background(settings.background);\n        grid.draw();\n        \n        toDraw.forEach(td=>td.draw(p5));\n        plants.forEach(mr=>mr.detectCollision(lights));\n\n        [\"red\", \"green\", \"blue\"].forEach(c=>{\n            const l = lights.get(c);\n            if (l && l.handle.checkChanged()){\n                socket.emit(\"/updateLight\", {color: c, rotation: {\n                    x: l.handle.target.x,\n                    y: l.handle.target.y\n                }})\n            }\n        })\n\n        mirrors.forEach((mirror, index)=>{\n            if (mirror && mirror.handle.checkChanged() || mirror.checkChanged()){\n                socket.emit(\"/updateMirror\", \n                    {\n                        index,\n                        x: mirror.location.x / p5.width,\n                        y: mirror.location.y / p5.height,\n                        rx : mirror.handle.target.x,\n                        ry : mirror.handle.target.y\n                    }\n                )\n            }\n        })\n\n\n        if (p5.frameCount%scoreUpdate == 0){\n            let score = 0;\n\n            socket.emit(\"/giveGameUpdate\");\n            if (plants && plants[0]){\n                socket.emit(\"/lights\", plants.map((p, index)=>{\n                    if (p.currentColors[player]){\n                        score++;\n                    }\n\n                    const colors = {\n                        red: p.currentColors.red,\n                        green: p.currentColors.green,\n                        blue: p.currentColors.blue\n                    }\n\n                    p.currentColors = {\n                        red: false,\n                        green: false,\n                        blue: false\n                    };\n                    return {\n                    index,\n                    colors\n                }}))\n            }\n\n\n\n            socket.emit(\"/score\", {player, score})\n\n        }\n\t};\n\n    // ===============================\n    //      I / O\n    // =============================== \n\tconst mousePressed = (p5)=>{\n        toInteract.forEach(ti=>ti.mousePressed(p5));\n\t}\n\n    const mouseReleased = (p5)=>{\n        toInteract.forEach(ti=>ti.mouseReleased(p5));\n    }\n\n    const mouseDragged = (p5)=>{\n        toInteract.forEach(ti=>ti.mouseDragged(p5));\n    }\n\n    const mouseMoved = (p5)=>{\n        toInteract.forEach(ti=>ti.mouseMoved(p5));\n    }\n\n\treturn <Sketch  setup={setup} \n                    draw={draw} \n                    mousePressed={mousePressed} \n                    mouseReleased={mouseReleased} \n                    mouseDragged={mouseDragged}\n                    mouseMoved={mouseMoved}\n                    \n                    />;\n};\n","import React, {useEffect, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nconst SensorType = ({name, description})=>{\n    const [open, setOpen] = useState(false);\n\n    const toggle = ()=>{\n        setOpen(!open);\n    }\n\n    return <div >\n\n            {open?<br/>:null}\n        \n            <span>\n            --->&nbsp;\n            </span>\n            <span className=\"hoverer\" onClick={toggle}>\n                [{name}] {open?<span>[X]</span>:null}\n            </span>\n        \n        <br/>\n        {open?\n        <div className=\"indenter\" >\n            {description}\n            <br/><br/>\n        </div> : null}\n    </div>\n\n}\n\nconst SensorTypes = ()=>{\n    const sensorTypes = useSelector(state => state.data.sensorTypes)\n    const [open, setOpen] = useState(false);\n\n    const toggle = ()=>{\n        setOpen(!open);\n    }\n\n    if (!sensorTypes){\n        return null;\n    }\n\n    return <div>\n        <span >\n            --> <span className=\"hoverer\" onClick={toggle}>  SENSORTYPES   {open?<span>[X]</span>:null}</span>\n        </span>\n        \n        {open?sensorTypes.map(st=><SensorType key={st.name} name={st.name} description={st.description} />):null}\n    </div>\n\n    \n}\n\nexport default SensorTypes;","import React, {useEffect, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nconst Sensor = ({type, value})=>{\n    const [history, setHistory] = useState([]);\n\n    useEffect(()=>{\n\n    })\n\n    return <div className=\"indenter\">\n        {type} - {value}\n    </div>\n\n}\n\nexport const Plant = ({name, sensors, init})=>{\n    const [open, setOpen] = useState(init);\n\n    const toggle = ()=>{\n        setOpen(!open);\n    }\n\n    return <div >\n\n            {open?<br/>:null}\n        \n            <span>\n            --->&nbsp;\n            </span>\n            <span className=\"hoverer\" onClick={toggle}>\n                [{name}] {open?<span>[X]</span>:null}\n            </span>\n        \n        <br/>\n        {open?\n        <div className=\"indenter\" >\n            {sensors.map((s, i)=><Sensor key={\"sensor\"+i} type={s.type} value={s.value} />)}\n            <br/><br/>\n        </div> : null}\n    </div>\n\n}\n\nconst Plants = (plantClusters)=>{\n    const [open, setOpen] = useState(false);\n\n\n    const toggle = ()=>{\n        setOpen(!open);\n    }\n\n    \n\n    useEffect(()=>{\n        \n    })\n\n    if (!plantClusters){\n        return null;\n    }\n\n    return <div>\n        <span >\n            --> <span className=\"hoverer\" onClick={toggle}>  PLANTS   {open?<span>[X]</span>:null}</span>\n        </span>\n        \n        {open?plantClusters.plantClusters.map(p=><Plant key={p.name} name={p.name} sensors={p.sensors} />):null}\n    </div>\n\n    \n}\n\nexport default Plants;","import React, {useState, useEffect} from \"react\";\n\nconst Countdown = ({target, displaytext, endText})=>{\n    const [rt, setrt] = useState(null);\n    const [count, setCount] = useState(0);\n  \n    const secondsToTarget = ()=>{\n      if (rt){\n        return Math.floor(Math.abs((new Date().getTime() - rt.getTime()) / 1000));\n      } else {\n        return null;\n      }\n    }\n  \n    useEffect(()=>{\n      let int = null;\n  \n      if (target !== rt){\n        setrt(target);\n        setCount(null);\n      }\n  \n      if (rt){\n        int = setInterval(()=>{\n          setCount(secondsToTarget());\n        }, 500);\n      }\n  \n      return ()=>{\n        if(int){\n          clearInterval(int)\n        }\n      }\n    })\n  \n    if (!target || !rt || !count){\n      return null;\n    } else if (count && count > 0){\n      return <div>\n        {displaytext}: {count}\n      </div>\n    } else {\n      return <div> {endText} </div>\n    } \n  }\n\nexport default Countdown;","import React, {useEffect, useState} from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Grid, Col, Row, Theme} from '../theme'\nimport SensorTypes from './sensorTypes';\nimport Plants, {Plant} from './plants';\nimport Countdown from './countdown';\n\nconst Controller = ({phase, phases, target, player})=>{\n    const [theme, socket, client, gameSettings, sensorTypes] = useSelector(state => \n        [ state.data.theme, \n          state.data.socket, \n          state.data.client, \n          state.data.gameSettings,\n          state.data.sensorTypes,\n        ]);\n    const [plantClusters, setPlantClusters] = useState(null);\n    const [selected, setSelected] = useState(null);\n    const [score, setScore] = useState(null);\n    const [highScore, setHighScore] = useState(null);\n    const ROT = 3;\n    const TRA = 10;\n\n    useEffect(()=>{\n        if (socket){\n            socket.on(\"/selected_\", (selector)=>{\n                setSelected(selector);\n            })\n\n            socket.on(\"/updateSensors\", (plantClusters)=>{\n                setPlantClusters(plantClusters);\n            });\n\n            socket.on(\"/score_\", (score_)=>{\n                setScore(score_)\n            })\n\n            socket.on(\"/highscore\", (highscore_)=>{\n                setHighScore(highscore_);\n                console.log(highscore_);\n            })\n        }\n\n        return ()=>{\n            socket.off(\"/selected_\");\n            socket.off(\"/updateSensors\");\n            socket.off(\"/score_\");\n            socket.off(\"/highscore\");\n        }\n    })\n\n    \n    if (!theme || !client || !gameSettings || !socket || !sensorTypes || !plantClusters){\n        return null;\n    }  \n\n    const getSelected = ()=>{\n        if (selected && selected.type){\n            switch (selected.type){\n                case \"plant\":\n                    return <div> <br/>\n                        -> Selection <br/>\n                        {\n                            (()=>{\n                                const p = plantClusters[selected.index];\n                                return <Plant init={true} key={p.name} name={p.name} sensors={p.sensors} />\n                            })()\n                        }\n                        --------------------- <br/><br/>\n                    </div>\n                case \"mirror\":\n                    const getVal = (value)=>{\n                        return {index: selected.index, value}\n                    }\n                    return <div>\n                        -> Mirror selected: [{selected.index}] <br/><br/>\n                                <table>\n                                    <tbody>\n                                    <tr >\n                                        <td  onClick={()=>{\n                                            socket.emit(\"/rotateMirror_\", getVal(ROT));\n                                        }}>\n                                            TURN LEFT\n                                        </td>\n                                        <td onClick={()=>{\n                                            socket.emit(\"/rotateMirror_\", getVal(-ROT));\n                                        }}>\n                                            TURN RIGHT\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td onClick={()=>{\n                                            socket.emit(\"/moveMirror_\", getVal({y: -TRA}));\n                                        }}>\n                                            GO UP\n                                        </td>\n                                        <td onClick={()=>{\n                                            socket.emit(\"/moveMirror_\", getVal({y: TRA}));\n                                        }}>\n                                            GO DOWN\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td onClick={()=>{\n                                            socket.emit(\"/moveMirror_\", getVal({x: -TRA}));\n                                        }}>\n                                            GO LEFT\n                                        </td>\n                                        <td onClick={()=>{\n                                            socket.emit(\"/moveMirror_\", getVal({x: TRA}));\n                                        }}>\n                                            GO RIGHT\n                                        </td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                                <br/><br/><br/>\n                    </div>\n                default:\n                    return \"wrong selection\"\n            }\n        } else {\n            return null;\n        }\n    }\n\n    return <div>\n                <br/>\n                <p>\n                    ||==================================||\n                        &nbsp;&nbsp;&nbsp; BIOMODD [BRG<sup>13</sup>] SPECTRUM\n                    ||==================================||\n                </p>\n                \n                <div> \n                    GameStatus = {phase} \n                </div>\n\n                {getSelected()}\n\n                <div>\n                    {player? <span>PlayerColor = {player} </span> : null}\n                </div>\n                <div>\n                    {(target && phase == phases.RUNNING)? <span> \n                        <Countdown target={target} displaytext={\"Time remaining\"} endText={\"THE END\"} /> <br/>\n                        </span> : null}\n                </div>\n\n                <br/>\n\n                <div>\n                {score?<div>\n                            -- SCORE <br/>\n                            RED: {score.red} <br/>\n                            GREEN: {score.green} <br/>\n                            BLUE: {score.blue} <br/>\n                            TOTAL: {score.red+score.green+score.blue}\n                        </div>:null}\n                {highScore?<div>\n                    HIGHSCORE_INDIVIDUAL: {highScore.HS1} <br />\n                    HIGHSCORE_TOTAL: {highScore.HSA} <br />\n                </div>:null}\n\n                </div>\n                \n\n                <SensorTypes />\n                <Plants plantClusters={plantClusters} />\n                {/* {sensorTypes.map(st=><div>\n                    {st.name}\n                </div>)} */}\n\n    </div>;\n}\n\nexport default Controller;","import React from 'react'\n\nconst Score = ({socket})=>{\n    return \"i will be score\";\n}\n\nexport default Score;","import React from 'react';\nimport Countdown from './countdown';\n\nconst LoaderScreen = ({player, players, socket, setPlayer, target})=>{\n\n\n    const MakePlayer = (color)=>{\n\n        const killed = <div className=\"kill\" >\n          [PLAY {color.toUpperCase()}]\n        </div>;\n  \n        const selected = <div>\n          [{color.toUpperCase()} SELECTED]\n        </div>;\n  \n        if (player){\n          if (player == color){\n            return selected;\n          } else if (player == color+\"s\"){\n              return selected;\n          } else {\n            return killed;\n          }\n        }\n  \n        if (players[color] && players[color+\"s\"]){\n          return killed;\n        } else if (players[color]){\n          return <div className=\"hoverer\" onClick={()=>{\n            if (!player){\n              socket.emit(\"/startgame\", color+\"s\");\n              setPlayer(color+\"s\");\n            }\n          }}>\n            [PLAY {color.toUpperCase()} support]\n          </div>\n        } else {\n          return <div className=\"hoverer\" onClick={()=>{\n            if (!player){\n              socket.emit(\"/startgame\", color);\n              setPlayer(color)\n            }\n          }}>\n            [PLAY {color.toUpperCase()}]\n          </div>\n        }\n      }\n\n    \n      \n    return <div style={{color: \"white\"}}>\n            <div style={{color: \"white\", width: \"100%\", textAlign:\"center\"}}>\n              <br/><br/><br/>\n              || ==== LOAD NEW GAME ==== ||\n              <br/><br/>\n  \n              <div >\n                {MakePlayer(\"red\")}\n                {MakePlayer(\"green\")}\n                {MakePlayer(\"blue\")}\n              </div>\n  \n              <br/><br/><br/>\n              <Countdown target={target} displaytext={\"Time before launch\"} endText=\"LETS GO\"/>\n\n              || ==== MULTIPLAYER GAME ==== ||\n              <br/><br/><br/>\n              <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n              All the computer terminals in the installation are connected into a local network. An abstract computer game was created specifically for this Biomodd version and is running on this network. The game is conceived as a multiplayer game and players can choose either to cooperate or compete with other players. The goal of the game is to illuminate as many virtual plants as possible within a limited timeframe.\n            The data from the different sensors in the installation are used to generate the virtual world that appears at the beginning of each round. In this way, both humans and biological organisms have a presence in the game.\n            <br/><br/>\n            You can rotate your chosen light using the circular handle by clicking and dragging. Additionally, you can move the mirrors by dragging them around and rotate them using their circular handle. The goal of the game is to create an optimal system where your light touches the most plants in the playing field.\n              </div>\n\n              <br/><br/><br/><br/>\n\n              || ==== INTERACTIVE LIGHT AND SOUND ==== ||\n              <br/><br/><br/>\n              <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n              The lighting system has two modes. In standby mode purple grow lights stimulate the growth of the plants. As soon as people start interacting with the computer game, the lighting switches to an interactive mode. Computer-controlled lighting reflects the activities of the players and creates a real-world extension of the game's virtual aesthetics. \n\nThe audio is a dynamic soundscape that is generated in real-time using the electrical signals from the plants. In essence, it's the plant's response to the ever-changing environment and interactions in the museum that become audible.\n\n              </div>\n            </div>\n    </div> \n}\n\nexport default LoaderScreen;","import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Col, Row} from '../theme'\nimport Spectrum from '../components/spectrum'\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport Controller from './controller'\nimport Score from './score';\nimport LoaderScreen from './LoaderScreen';\nimport { ACTIONS as DATA_ACTIONS } from \"../reducers/DataReducer\"\n\nconst Game = ()=>{\n\n    const PHASES = Object.freeze({\n      LOAD: \"load\",\n      RUNNING: \"running\",\n      END: \"ended\"\n    });\n\n    const [theme, socket, client, gameSettings, plantClusters, sensorTypes] = useSelector(state => \n      [ state.data.theme, \n        state.data.socket, \n        state.data.client, \n        state.data.gameSettings,\n        state.data.plantClusters,\n        state.data.sensorTypes\n      ]);\n    const [start, setStart] = useState(null);\n    const [phase, setPhase] = useState(PHASES.END);\n    const [players, setPlayers] = useState(null);\n    const [player, setPlayer] = useState(null);\n    const [target, setTarget] = useState(null);\n    const [listeners, setListeners] = useState(null);\n    const dispatch = useDispatch();\n    const handle = useFullScreenHandle();\n\n    const gamewidth = 9;\n    \n    const setTargetFromDate = (seconds)=>{\n      const d = new Date();\n      d.setSeconds( d.getSeconds() + seconds);\n      setTarget(d)\n    }\n\n    useEffect(()=>{\n      if (socket){\n        setListeners(true);\n        socket.on(\"/phase\", (newphase)=>{\n          setPhase(newphase);\n          switch(newphase){\n            case PHASES.END:\n              setPlayer(null);\n              setTarget(null);\n              break;\n            case PHASES.LOAD:\n              if (gameSettings){\n                setTargetFromDate(gameSettings.beginningTime);\n              }\n              break;\n            case PHASES.RUNNING:\n              if (gameSettings){\n                setTargetFromDate(gameSettings.duration);\n              }\n              break;\n          } \n        })\n\n        if (!players){\n          socket.emit(\"/givePlayers\"); \n        }\n    \n        socket.on(\"/players\", (newplayers)=>{\n          setPlayers(newplayers);\n        })\n      }\n\n      return ()=>{\n        // clean up our listeners here\n        if (socket){\n          socket.off(\"/phase\");\n          socket.off(\"/players\");\n          setListeners(false);\n        }\n      }\n    }, [listeners, setListeners, socket, gameSettings])\n\n    const go = ()=>{\n        setStart(true);\n        handle.enter();\n    }\n\n    const content = ()=>{\n      switch(phase){\n        case PHASES.LOAD : \n        case PHASES.END :\n          return <LoaderScreen player={player} players={players} socket={socket} setPlayer={setPlayer} target={target} />\n        case PHASES.RUNNING : \n          return <Spectrum \n                      socket={socket} \n                      player={player} \n                      players={players} \n                      scoreUpdate={gameSettings.scoreUpdate} \n                      />;\n      }\n    }\n\n    if (!theme || !client || !gameSettings || !players){\n        return null;\n    }\n\n    return <div>\n      {start?null:<button onClick={go}>LOAD</button>}\n\n      <FullScreen handle={handle}>\n        <Row>\n          <Col xs={12} sm={12} md={gamewidth}>\n            <theme.Empty style={{padding: \"0\", margin: \"0\"}}>\n              <div style={{width: \"100%\", height: \"100vh\"}}> \n                {(gameSettings)?start?content():content() : null}\n                </div>\n                <div>\n                  <Score socket={socket} />\n                </div>\n            </theme.Empty>\n          </Col>\n          <Col xs={12} md={12-gamewidth} style={{background: \"black\", color: \"white\", borderLeft: \"solid 2px white\"}}>\n            <Controller phase={phase} phases={PHASES} target={target} player={player} />\n          </Col>\n        </Row>\n      </FullScreen>\n    </div>\n}\n\nexport default Game;\n\n\n","import Theme from '../theme'\n\n\nclass BuilderTheme extends Theme {\n    constructor(){\n      super()\n      this.font = \"Fira Code\"\n      this.sizes.normal = \"1.2em\"\n    }\n  \n    get defaultFont(){\n      return `${super.defaultFont}font-weight: 400;`\n    }\n  \n    get Title(){\n      return this.styled(super.Title)` font-weight: bold;`\n    }\n  }\n  \n  \n\n  export default BuilderTheme;","import React, {useState, useEffect, useRef} from 'react';\nimport { Grid, Col, Row} from '../theme'\nimport { useSelector } from \"react-redux\";\nimport Nav from '../components/nav'\n\nimport BlockContent from '@sanity/block-content-to-react';\nimport { NavLink } from 'react-router-dom';\nimport Moment from 'react-moment';\n\n\nconst Home = ()=>{\n    const theme = useSelector(state => state.data.theme);\n    const news = useSelector(state => state.data.news);\n    const events = useSelector(state=>state.data.events)\n    const faqs = useSelector(state=>state.data.faqs)\n    const newsref = useRef(null);\n    \n    if (!theme){\n        return null;\n    } else {\n\n      const getEvents = (events)=>events.map(({title, description, available, moment})=><div key={title}>\n      <theme.SubTitle>\n        <Moment format=\"DD/MM\">{moment}</Moment> &nbsp;&nbsp; {title}\n      </theme.SubTitle>\n      <theme.Text>\n          <BlockContent blocks={description} />\n      </theme.Text>\n      <theme.Text>\n          <i>\n            Available places: {available}\n          </i>\n      </theme.Text>\n      <br/>                  <br/>                  <br/>\n    </div>)\n        \n  \n    return <Row align=\"center\">\n      <Col xs={12}>\n      <Nav />\n      </Col>\n        \n        \n      <Col xs={12} sm={8} md={6}>\n          <theme.Container>\n            <br/><br/>\n            <theme.Wrapped>\n              <theme.Container>\n                <theme.Title ref={newsref}>\n                    NEWS\n                </theme.Title>\n                <br/>\n\n                {news?\n\n                news.map(({title, description, images})=><>\n                  <theme.SubTitle key={title}>\n                    {title}\n                  </theme.SubTitle>\n                  <theme.Text>\n                      <BlockContent blocks={description} />\n                  </theme.Text>\n                  {(images && images.length)?\n                  images.map(({title, description, image})=><>\n                      <theme.Text key={title}>\n                        <b>\n                        {title}\n                        </b>\n                      </theme.Text>\n                      <img src={image} alt={title} style={{width: \"100%\"}} />\n                      <theme.Text>\n                        <i>\n                        <BlockContent blocks={description} />\n                        </i>\n                      </theme.Text>\n                  </>)\n                  : null}\n                  <br/>\n                </>)\n                \n                : <theme.Text>L O A D I N G</theme.Text>}\n              </theme.Container>\n            </theme.Wrapped>\n          </theme.Container>\n        </Col>\n\n        <Col xs={12} sm={8} md={6}>\n          <theme.Container>\n            <br/><br/>\n            <theme.Wrapped>\n              <theme.Container>\n                <theme.Title >\n                    Frequently Asked Questions\n                </theme.Title>\n                <br/>\n\n                {faqs?\n                  faqs.map(({title, description})=><theme.Text key={title}>\n                    <b>\n                      {title}\n                    </b> <br/>\n                    <BlockContent blocks={description} />\n                  </theme.Text>)\n                : <theme.Text>L O A D I N G</theme.Text>}\n\n                <br/>\n                             \n\n              </theme.Container>\n            </theme.Wrapped>\n          </theme.Container>\n\n          <theme.Container>\n            <br/><br/>\n            <theme.Wrapped>\n              <theme.Container>\n                <theme.Title >\n                    EVENTS\n                </theme.Title>\n                <br/>\n\n                {events?\n                  getEvents(events.filter((e)=>{\n                    const today = new Date()\n                    const yesterday = new Date(today)\n                    yesterday.setDate(yesterday.getDate() - 1)\n                    return new Date(e.moment) >= yesterday;\n                  }))                \n                : <theme.Text>L O A D I N G</theme.Text>}\n\n                <br/>\n                <theme.Title >\n                    PAST EVENTS\n                </theme.Title>\n                <br/>\n\n\n                {events?\n                  getEvents(events.filter((e)=>{\n                    const today = new Date()\n                    const yesterday = new Date(today)\n                    yesterday.setDate(yesterday.getDate() - 1)\n                    return new Date(e.moment) < yesterday;\n                  }))                \n                : null}                \n\n              </theme.Container>\n            </theme.Wrapped>\n          </theme.Container>\n        </Col>\n\n        \n\n        \n\n      </Row>\n      \n    \n    }\n\n    \n  }\n\nexport default Home;","import React, {useEffect} from 'react';\nimport Theme, {OverviewPage} from './theme'\nimport { Provider } from \"react-redux\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport Store from \"./Store\";\nimport { createBrowserHistory } from 'history';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ACTIONS as DATA_ACTIONS } from \"./reducers/DataReducer\"\nimport sanityclient from './client';\nimport Server from './components/server'\n\n\nimport { Grid, Col, Row} from './theme'\nimport Game from './components/game'\n\n\nimport './assets/fonts/'\nimport BuilderTheme from './services/Buildertheme'\nimport Home from './components/Home'\n\nconst DataHelper = () => {\n  const data = useSelector(state => state.data);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!data.client && dispatch){\n      const cli = sanityclient(dispatch);\n      dispatch({ type: DATA_ACTIONS.SET_CLIENT, client: cli});\n    } \n\n    if (!data.theme && dispatch ){\n      const builder = new BuilderTheme();\n      dispatch({type: DATA_ACTIONS.SET_THEME, theme: new BuilderTheme()})\n      // dispatch({type: DATA_ACTIONS.SET_THEMES, themes: [new BuilderTheme()]})\n    }\n  })\n  return (\n    null\n  )\n}\n\n\nconst App =()=>{\n  const history = createBrowserHistory()\n  const theme = new BuilderTheme();\n\n  return (\n    <Provider store={Store}>\n    <DataHelper />\n      <Router history={history}>\n\n        <Grid style={{width: \"100%\", minWidth: \"100%\", margin: 0, padding: 0}}>\n\n        \n\n        \n        \n      \n        <span>\n       \n            <Switch>\n              <Route exact path=\"/\" component={Game} />\n              {/* <Route exact path=\"/overview\" component={OverviewPage} />\n              <Route exact path=\"/server\" component={Server} /> */}\n              <Route exact path=\"/gamelegacy\" component={Game} />\n              <Route component={Home}/>\n            </Switch>\n        </span>\n\n        </Grid>\n      </Router>\n  </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// import './assets/fonts/OCP'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.4ef8c6e8.svg\";"],"sourceRoot":""}